{% extends 'layout/base.twig' %}
{% import 'macros/helpers.twig' as helpers %}

{% block title %}
- Profile - {{ result.meta.url }}
{% endblock %}

{% block content %}

<div class="row-fluid">
<div class="span9">
    <div class="sidebar-nav">
        <ul class="nav nav-list">
            <li class="nav-header">This Run</li>
            <a href="{{ url('run.compare', {base: result.id|trim }) }}" id="compare-button" class="btn back-link">
                Compare this run
            </a>
	    <a href="{{ url('run.flamegraph', {id: result.id|trim }) }}" class="btn back-link">
                 View Flamegraph
            </a>
	    <a href="{{ url('run.callgraph', {id: result.id|trim }) }}" class="btn back-link">
                View Callgraph
            </a>
            <li><strong>URL</strong> <a href="{{ url('url.view', {'url': result.meta('url')|simple_url }) }}">{{ result.meta('url') }}</a></li>
            <li><strong>Time</strong> {{ result.date|date(date_format) }}</li>
            <li><strong>ID</strong> <a href="{{ url('custom.help', {id: result.id|trim }) }}">{{ result.id }}</a></li>
{#
            <li><strong>Wall Time</strong> {{ result.get('main()', 'wt')|as_time }}</li>
            <li><strong>CPU Time</strong> {{ result.get('main()', 'cpu')|as_time }}</li>
            <li><strong>Memory Usage</strong> {{ result.get('main()', 'mu')|as_bytes }}</li>
            <li><strong>Peak Memory Usage</strong> {{ result.get('main()', 'pmu')|as_bytes }}</li>

            <li class="nav-header">GET</li>
            <li>{{ helpers.property_list('GET', result.meta('get')) }}</li>
<!--
            <li class="nav-header">SERVER</li>
            <li>{{ helpers.property_list('SERVER', result.meta('SERVER')) }}
-->
            <li class="nav-header">Waterfall</li>
            <li><strong>By IP</strong> <a href="{{ url('waterfall.list', {'remote_addr': result.meta.SERVER.REMOTE_ADDR, 'request_start': result.meta.SERVER.REQUEST_TIME - 5, 'request_end': result.meta.SERVER.REQUEST_TIME + 15}) }}">{{ result.meta.SERVER.REMOTE_ADDR }}</a></li>
#}

        </ul>
    </div>
</div>

<div class="row-fluid">
  <div class="pull-right form-search">
      <input type="search" id="function-filter" placeholder="Filter by function name" />
  </div>
</div>

<div class="row-fluid" data-role="grid">

</div><!--/row-->
{% endblock %}

{% block jsfoot %}
<script src="{{ static('js/jquery-ui-1.9.2.custom.min.js') }}" type="text/javascript"></script>
<script src="{{ static('js/jquery.event.drag-2.2.js') }}" type="text/javascript"></script>

<script src="{{ static('js/slick/slick.core.js') }}" type="text/javascript"></script>
<script src="{{ static('js/slick/slick.formatters.js') }}" type="text/javascript"></script>
<script src="{{ static('js/slick/slick.dataview.js') }}" type="text/javascript"></script>
<script src="{{ static('js/slick/slick.grid.js') }}" type="text/javascript"></script>
<script src="{{ static('js/slick/slick.groupitemmetadataprovider.js') }}" type="text/javascript"></script>


<script type="text/javascript">
    jQuery(function($){

        var nameFormatter =  function(column, row, data) {
            var namesPart = (data || '').split('::');
            var fname ='<a href="{{ url('run.symbol', {'id': result.id|trim}) }}&amp;symbol='
                    + window.encodeURI(data) +'" title="' + data + '" class="cell-p-fname">'
                    +  namesPart.pop() + '</b></a>';
            namesPart = namesPart.length ? namesPart.pop().split(/\\|_/) : namesPart;

            var className = namesPart.length ? '<b class="cell-p-class">' + namesPart.pop() + '</b>' : '';
            var vendor = namesPart.length ? '<b class="cell-p-vendor">' + namesPart.splice(0, 1) + '</b>' : '';
            var path = namesPart.length ? '<b class="cell-p-path">' + namesPart.join(' / ') + '</b>' : '';

            return vendor + path + className + fname;
        };
        var  numberFormater = function(column, row, data) {
            return parseFloat(data).toFixed(0).replace(/./g, function (c, i, a) {
                return i && c !== "." && !((a.length - i) % 3) ? ' ' + c : c;
            })
        };

        var data = {{ profile|json_encode|raw }} || [];
        var groupFormater = function(field) {
            return function(totals) {
                return totals.sum[field]
            }
        }
        var columns = [
            {id: "id", name: "#", field: "id", sortable: true},
            {id: "name", name: "Name:", field: "name", sortable: true,cssClass: "cell-call", minWidth: 600,  type: 'string', formatter: nameFormatter},
            {id: "count", name: "Count:", field: "ct", sortable: true, cssClass: "cell-int", formatter: numberFormater},
            {id: "ecpu", name: "Cpu:", field: "ecpu", sortable: true, cssClass: "cell-int", formatter: numberFormater,
                groupTotalsFormatter: groupFormater('ecpu')},
            {id: "wt", name: "Time:", field: "ewt", sortable: true, cssClass: "cell-int", formatter: numberFormater},
            {id: "epmu", name: "Mem", field: "epmu", sortable: true, cssClass: "cell-int", formatter: numberFormater },
            {id: "pewt", name: "%", field: "pewt", minWidth: 100, sortable: true, cssClass: "cell-percent",
                formatter: function(column, row, data) {  return "<b>" + (
                        Math.round(data*100)/100).toFixed(2) +
                        "</b><i>%</i>" +
                        '<span class="percent-complete-bar" style="background:hsl(' +
                        160 + 400*(data/100) + ',100%,50%); width:' +
                        100 * Math.sqrt(data/100) +
                        '%"></span>';
                    ; }, groupTotalsFormatter: groupFormater('pewt')
            },
            {id: "percent", name: "% Total", field: "pwt", minWidth: 100, sortable: true, cssClass: "cell-percent",
                formatter: function(column, row, data) {  return "<b>" + (
                        Math.round(data*100)/100).toFixed(2) +
                        "</b><i>%</i>" +
                        '<span class="percent-complete-bar" style="background:hsl(' +
                        160 + 200*(data/100) + ',100%,50%); width:' +
                        50 * Math.sqrt(data/100) +
                        '%"></span>';
                    ; }
            }
        ];

        var $gridContainer = $('[data-role="grid"]');
        var options = {
            enableCellNavigation: false,
            forceFitColumns: true,
            showHeaderRow: false,
            headerRowHeight: 30,
            explicitInitialization: true
        }



        var columnFilters = columns.reduce(function(ob, val) {
            ob[val.id] = '';
            return ob;
        },{});
        var dataView = new Slick.Data.DataView();
        var grid = new Slick.Grid($gridContainer, dataView, columns, options);


        $gridContainer.data('grid', grid);

        grid.onSort.subscribe(function(e, args) {
            var cols = args.multiColumnSort ? args.sortCols : [args];

            dataView.sort(function(dataRow1, dataRow2) {
                for (var i = 0, l = cols.length; i < l; i++) {
                    var field = cols[i].sortCol.field;
                    var sign = cols[i].sortAsc ? 1 : -1;
                    var value1 = dataRow1[field], value2 = dataRow2[field];
                    var result = (value1 == value2 ? 0 : (value1 > value2 ? 1 : -1)) * sign;
                    if (result != 0) {
                        return result;
                    }
                }
                return 0;
            });
            grid.invalidate();
            grid.render();
        });
        grid.onHeaderContextMenu.subscribe(function(){ console.log(arguments); });
        grid.onHeaderRowCellRendered.subscribe(function(e, args) {
            $(args.node).empty();
            $("<input type='text'>")
                    .data("columnId", args.column.id)
                    .val(columnFilters[args.column.id])
                    .appendTo(args.node);
        });

        dataView.onRowCountChanged.subscribe(function(e, args) {
            grid.updateRowCount();
            grid.render();
        });

        $(grid.getHeaderRow()).delegate(":input", "change keyup paste", function(e) {
            var columnId = $(this).data("columnId");
            if (columnId != null
                    && columnFilters[columnId] != $.trim($(this).val())) {
                columnFilters[columnId] = $.trim($(this).val());
                dataView.refresh();
            }
        });

        grid.init();

        dataView.beginUpdate();
        dataView.setItems(data);
//        dataView.setGrouping({
//            getter: function(row) {
//                return row.name.replace(/^(\w+\\\w+\\\w+)\\.*/, "$1");
//            },
//            formatter: function (g) {
//                return "Group:  " + g.value + "  <span style='color:green'>(" + g.count + " items)</span>";
//            },
//            aggregators: [
//                new Slick.Data.Aggregators.Sum("ecpu"),
//                new Slick.Data.Aggregators.Sum("pewt")
//            ],
//            aggregateCollapsed: true,
//            lazyTotalsCalculation: true
//        });
        dataView.endUpdate();

        dataView.setFilter(function (item) {
            var col = grid.getColumns();
            for (var columnId in columnFilters) {
                if (columnId !== undefined && columnFilters[columnId] !== "") {
                    var c = col[grid.getColumnIndex(columnId)];

                    if (c.type == 'string') {
                        if (item[c.field].indexOf(columnFilters[columnId]) == -1) {
                            return false;
                        }
                    } else
                    if (item[c.field] <= columnFilters[columnId]) {
                        return false;
                    }
                }
            }
            return true;
        });


        $(window).on('resize',function() {
            $gridContainer.css({'height': Math.max(40, $(window).height()-42) + 'px'});
            grid.resizeCanvas();
        }).trigger('resize');

    });
</script>
{% endblock %}
